from typing import Tuple, Optional, Dict, Any
from termcolor import colored
import importlib.util

from .base_provider import BaseProvider
from .response_parser import ResponseParser

class OpenRouterProvider(BaseProvider):
    """OpenRouter API provider for multiple LLM models"""
    
    def __init__(self):
        self.client = None
        self.model = None
        
    @property
    def name(self) -> str:
        return "openrouter"
    
    @property
    def description(self) -> str:
        return f"OpenRouter ({self.model})" if self.model else "OpenRouter"
    
    def initialize(self, config: Dict[str, Any]) -> bool:
        """Initialize OpenRouter with configuration"""
        try:
            # Check if OpenAI package is installed (OpenRouter uses OpenAI client)
            if importlib.util.find_spec("openai") is None:
                print(colored("⚠️ OpenAI package not installed. Run 'pip install openai'", "yellow"))
                return False
                
            import openai
            api_key = config.get("api_key")
            self.model = config.get("model")
            
            if not api_key:
                print(colored("⚠️ OpenRouter API key not configured", "yellow"))
                return False
                
            # Default model if none provided
            if not self.model:
                self.model = "openai/gpt-3.5-turbo"
                
            self.client = openai.OpenAI(
                api_key=api_key,
                base_url="https://openrouter.ai/api/v1"
            )
            
            # Test connection
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "Hi"}],
                max_tokens=5
            )
            
            print(colored(f"✓ OpenRouter initialized successfully with model {self.model}", "green"))
            return True
            
        except Exception as e:
            print(colored(f"⚠️ OpenRouter initialization failed: {str(e)}", "yellow"))
            return False
    
    def generate_command(self, user_input: str, os_type: str) -> Tuple[Optional[str], Optional[str]]:
        """Generate command using OpenRouter"""
        if not self.client:
            return None, None
            
        try:
            system_prompt = f"""You are a {os_type} terminal expert. Follow STRICTLY:
                1. Respond with ONLY the executable command on FIRST LINE
                2. Use Windows cmd commands when target is windows
                3. Use bash commands when target is linux/mac
                4. Current system: {os_type}
                5. Example Windows alternatives:
                   - clear -> cls
                   - ls -> dir
                   - grep -> findstr"""
                
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Convert to terminal command: {user_input}\n\nCommand:"}
                ],
                temperature=0.5
            )
            
            if not response.choices:
                return None, None
                
            full_response = response.choices[0].message.content
            command, explanation = ResponseParser.parse_response(full_response)
            
            return command, explanation if explanation else f"Generated by OpenRouter ({self.model.split('/')[-1]})"
            
        except Exception as e:
            print(colored(f"⚠️ OpenRouter API Error: {str(e)}", "red"))
            return None, None
