from typing import Tuple, Optional, Dict, Any
from termcolor import colored
import importlib.util

from .base_provider import BaseProvider
from .response_parser import ResponseParser

class AnthropicProvider(BaseProvider):
    """Anthropic Claude API provider"""
    
    def __init__(self):
        self.client = None
        self.model = None
        
    @property
    def name(self) -> str:
        return "anthropic"
    
    @property
    def description(self) -> str:
        return f"Anthropic ({self.model})" if self.model else "Anthropic Claude"
    
    def initialize(self, config: Dict[str, Any]) -> bool:
        """Initialize Anthropic with configuration"""
        try:
            # Check if Anthropic package is installed
            if importlib.util.find_spec("anthropic") is None:
                print(colored("⚠️ Anthropic package not installed. Run 'pip install anthropic'", "yellow"))
                return False
                
            import anthropic
            api_key = config.get("api_key")
            self.model = config.get("model")
            
            if not api_key:
                print(colored("⚠️ Anthropic API key not configured", "yellow"))
                return False
                
            self.client = anthropic.Anthropic(api_key=api_key)
            
            # Use default model if not specified
            if not self.model:
                self.model = "claude-3-haiku-20240307"
                
            # Test connection
            response = self.client.messages.create(
                model=self.model,
                max_tokens=5,
                messages=[{"role": "user", "content": "Hi"}]
            )
            
            print(colored(f"✓ Anthropic initialized successfully with model {self.model}", "green"))
            return True
            
        except Exception as e:
            print(colored(f"⚠️ Anthropic initialization failed: {str(e)}", "yellow"))
            return False
    
    def generate_command(self, user_input: str, os_type: str) -> Tuple[Optional[str], Optional[str]]:
        """Generate command using Anthropic direct API"""
        if not self.client:
            return None, None
            
        try:
            system_prompt = f"""You are a {os_type} terminal expert. Follow STRICTLY:
                1. Respond with ONLY the executable command on FIRST LINE
                2. Use Windows cmd commands when target is windows
                3. Use bash commands when target is linux/mac
                4. Current system: {os_type}
                5. Example Windows alternatives:
                   - clear -> cls
                   - ls -> dir
                   - grep -> findstr"""
            
            response = self.client.messages.create(
                model=self.model,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": f"Convert to terminal command: {user_input}\n\nCommand:"}
                ],
                temperature=0.5,
                max_tokens=1000
            )
            
            if not response.content:
                return None, None
                
            full_response = response.content[0].text
            command, explanation = ResponseParser.parse_response(full_response)
            
            return command, explanation if explanation else f"Generated by Anthropic ({self.model})"
            
        except Exception as e:
            print(colored(f"⚠️ Anthropic API Error: {str(e)}", "red"))
            return None, None
